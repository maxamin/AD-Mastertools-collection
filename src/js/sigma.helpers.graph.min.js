(function(a){"use strict";if("undefined"==typeof sigma)throw new Error("sigma is not declared");var b=new sigma.utils.map;sigma.classes.graph.attach("addNode","sigma.helpers.graph.addNode",function(a){a.fixed&&b.set(a.id,this.nodesIndex.get(a.id))}),sigma.classes.graph.attachBefore("dropNode","sigma.helpers.graph.dropNode",function(a){b["delete"](a)}),sigma.classes.graph.attachBefore("clear","sigma.helpers.graph.clear",function(){b.clear(),b=new sigma.utils.map}),sigma.classes.graph.hasMethod("fixNode")||sigma.classes.graph.addMethod("fixNode",function(a){return this.nodesIndex.get(a)&&(this.nodesIndex.get(a).fixed=!0,b.set(a,this.nodesIndex.get(a))),this}),sigma.classes.graph.hasMethod("unfixNode")||sigma.classes.graph.addMethod("unfixNode",function(c){return this.nodesIndex.get(c)&&(this.nodesIndex.get(c).fixed=a,b["delete"](c)),this}),sigma.classes.graph.hasMethod("getFixedNodes")||sigma.classes.graph.addMethod("getFixedNodes",function(){var a=[];return b.forEach(function(b,c){a.push(b)}),a}),sigma.classes.graph.hasMethod("hasFixedNodes")||sigma.classes.graph.addMethod("hasFixedNodes",function(){return 0!=b.size}),sigma.classes.graph.hasMethod("dropNodes")||sigma.classes.graph.addMethod("dropNodes",function(a){if(arguments.length>1)throw new Error("Too many arguments. Use an array instead.");if("string"==typeof a||"number"==typeof a)this.dropNode(a);else{if(!Array.isArray(a))throw new TypeError('Invalid argument: "v" is not a string, a number, or an array, was '+a);var b,c;for(b=0,c=a.length;c>b;b++){if("string"!=typeof a[b]&&"number"!=typeof a[b])throw new TypeError("Invalid argument: a node id is not a string or a number, was "+a[b]);this.dropNode(a[b])}}return this}),sigma.classes.graph.hasMethod("dropEdges")||sigma.classes.graph.addMethod("dropEdges",function(a){if(arguments.length>1)throw new Error("Too many arguments. Use an array instead.");if("string"==typeof a||"number"==typeof a)this.dropEdge(a);else{if(!Array.isArray(a))throw new TypeError("Invalid argument: it is not a string, a number, or an array, was "+a);var b,c;for(b=0,c=a.length;c>b;b++){if("string"!=typeof a[b]&&"number"!=typeof a[b])throw new TypeError("Invalid argument: an edge id is not a string or a number, was "+a[b]);this.dropEdge(a[b])}}return this}),sigma.classes.graph.hasMethod("adjacentNodes")||sigma.classes.graph.addMethod("adjacentNodes",function(a,b){if(b=b||{},b.withHidden=2==arguments.length?b.withHidden:!0,"string"!=typeof a&&"number"!=typeof a)throw new TypeError("The node id is not a string or a number, was "+a);var c,d=this,e=[];return(this.allNeighborsIndex.get(a)||[]).forEach(function(f,g){b.withHidden?e.push(d.nodesIndex.get(g)):d.nodes(g).hidden||(c=0!=d.allNeighborsIndex.get(a).get(g).keyList().map(function(a){return d.edges(a)}).filter(function(a){return!a.hidden}).length,c&&e.push(d.nodesIndex.get(g)))}),e}),sigma.classes.graph.hasMethod("adjacentEdges")||sigma.classes.graph.addMethod("adjacentEdges",function(a,b){if(b=b||{},b.withHidden=2==arguments.length?b.withHidden:!0,"string"!=typeof a&&"number"!=typeof a)throw new TypeError("The node id is not a string or a number, was "+a);var c=this,d=this.allNeighborsIndex.get(a)||[],e=[];return d.forEach(function(a,f){d.get(f).forEach(function(a,d){(b.withHidden||!c.edges(d).hidden)&&e.push(c.edges(d))})}),e})}).call(this);
//# sourceMappingURL=sigma.helpers.graph.min.js.map